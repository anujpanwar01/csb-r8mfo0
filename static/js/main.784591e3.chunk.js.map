{"version":3,"sources":["components/quotes/QuoteForm.module.css","components/layout/MainNavigation.module.css","components/UI/LoadingSpinner.js","components/quotes/QuoteList.module.css","components/layout/Layout.module.css","components/quotes/QuoteItem.module.css","components/UI/Card.module.css","components/UI/LoadingSpinner.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/UI/Card.js","components/quotes/QuoteForm.js","components/layout/MainNavigation.js","components/layout/layout.js","App.js","index.js"],"names":["module","exports","LoadingSpinner","className","classes","spinner","QuoteItem","props","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","Card","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","isLoading","loading","control","htmlFor","type","ref","rows","actions","MainNavigation","header","logo","nav","activeClassName","active","Layout","main","NewQuote","React","lazy","QuoteDetail","NotFound","AllQuotes","App","fallback","exact","path","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.784591e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__pcWBd\",\"logo\":\"MainNavigation_logo__3mTft\",\"nav\":\"MainNavigation_nav__2KJfX\",\"active\":\"MainNavigation_active__oN3Ka\"};","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Kyqv\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n  const changeSortingHandler = () => {\n    //1) 1st way to set path\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortAscending ? \"desc\" : \"asc\"}`\n    });\n    //2) alternative way to set path\n    // history.push(\n    //   `${location.pathname}?sort=${isSortAscending ? \"desc\" : \"asc\"}`\n    // );\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortAscending ? \"descending\" : \"ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formIsFocused = () => setIsEntering(true);\n  const formIsSubmitted = () => setIsEntering(false);\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure you want to leave this page because you lost your all entered data\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formIsFocused}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={formIsSubmitted} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { NavLink } from \"react-router-dom\";\r\n\r\nimport classes from \"./MainNavigation.module.css\";\r\n\r\nconst MainNavigation = () => {\r\n  return (\r\n    <header className={classes.header}>\r\n      <div className={classes.logo}>Great Quotes</div>\r\n      <nav className={classes.nav}>\r\n        <ul>\r\n          <li>\r\n            <NavLink activeClassName={classes.active} to=\"/quotes\">\r\n              All Quotes\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink activeClassName={classes.active} to=\"/new-quote\">\r\n              Add a Quote\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\nexport default MainNavigation;\r\n","import { Route } from \"react-router-dom\";\r\nimport { Fragment, useState } from \"react\";\r\nimport classes from \"./Layout.module.css\";\r\nimport QuoteList from \"../quotes/QuoteList\";\r\nimport QuoteForm from \"../quotes/QuoteForm\";\r\nimport MainNavigation from \"./MainNavigation\";\r\n\r\nconst Layout = (props) => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const quoteHanlder = (props) => {\r\n    const newQuote = {\r\n      id: Math.random() * 192992,\r\n      author: props.author,\r\n      text: props.text\r\n    };\r\n    setQuotes((prev) => [...prev, newQuote]);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <MainNavigation />\r\n      <main className={classes.main}>{props.children}</main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Layout from \"./components/layout/layout\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\n\nconst NewQuote = React.lazy(() => import(\"./pages/NewQuote\"));\nconst QuoteDetail = React.lazy(() => import(\"./pages/QuoteDetail\"));\nconst NotFound = React.lazy(() => import(\"./pages/NotFound\"));\nconst AllQuotes = React.lazy(() => import(\"./pages/AllQuotes\"));\n\nfunction App() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      }\n    >\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/quotes\" />\n          </Route>\n          <Route exact path=\"/quotes\">\n            <AllQuotes />\n          </Route>\n          <Route path=\"/quotes/:quoteId\">\n            <QuoteDetail />\n          </Route>\n          <Route path=\"/new-quote\">\n            <NewQuote />\n          </Route>\n          <Route path=\"*\">\n            <NotFound />\n          </Route>\n        </Switch>\n      </Layout>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n"],"sourceRoot":""}